Arguments in <angle brackets> are mandatory;
arguments in [square brackets] are optional.

==============================================================================

Specify a repulsive surface:

	repel_mesh <mesh.obj> <alpha> <beta>

The path for the OBJ is relative to where the scene file is.
A good default choice for alpha and beta is (6, 12).

==============================================================================

Add constraints:

	constrain barycenter
	constrain area [growth multiplier] [growth iterations] [growth addition]
	constrain volume [growth multiplier] [growth iterations] [growth addition]
	constrain vertices <vertex 1> [vertex 2] [vertex 3] [...]

The "growth multiplier" specifies how much the area or volume of the mesh
should grow, and the "growth iterations" specifies over how many iterations
the growth happens. So, for example,

	constrain area 3 200

means grow the total surface area by 3x over the course of 200 iterations.
The optional fourth parameter is a scalar that is added to the target value.
So, using

	constrain area 3 200 1.5

will cause the total surface area to grow to (3A + 1.5) over 200 iterations,
where A is the initial surface area.

A barycenter constraint should basically always be used.

==============================================================================

Add extra potentials:

	minimize squared_error [weight]
	minimize area [weight]
	minimize volume [weight]
	minimize area_deviation [weight]
	minimzie volume_deviation [weight]

These are extra terms that are added to the objective function for
gradient descent.

"area" and "volume" are penalties on the raw quantities, while
"area_deviation" and "volume_deviation" penalize how much the
quantities have changed from their initial values.

"squared_error" penalizes distance of each vertex from its initial position.

The "weight" parameter is a coefficient that multiplies the value of the
extra potential term. e.g.

	minimize area 1000

will add the term 1000 * (mesh total area) to the objective.

==============================================================================

Add obstacles:

	obstacle <obstacle mesh OBJ> [weight]

Adds a mesh as a static obstacle, exerting a repulsive potential on
the optimization mesh without moving on its own.

==============================================================================

Implicit barriers:

	implicit <surface name> <repel | attract> <power> <weight> <specific parameters>

Sets up an implicit surface as either an obstacle or an attractor. Obstacles
repel other surfaces, while attractors attract other surfaces.

Valid names for the first parameter are "sphere", "cylinder", "torus", and "plane".

The second parameter must be either "repel" or "attract", and will result
in an obstacle or an attractor, respectively.

The power parameter specifies the exponent of the repulsive or attractive
potential, (1 / r^p for obstacles, r^p for attractors).

The weight parameter is mandatory here (unlike with potentials).

Specific parameters depend on the chosen implicit surface. All parameters are
numbers, which will be parsed as doubles. Currently, the parameters are:

	sphere: <radius> <center x> <center y> <center z>
	cylinder: <radius> <center x> <center y> <center z> <axis x> <axis y> <axis z>
	torus: <major radius> <minor radius> <center x> <center y> <center z>
	plane: <point x> <point y> <point z> <normal x> <normal y> <normal z>

==============================================================================

Time limits:

	iteration_limit <iterations>
	time_limit <time in ms>

"iteration_limit" stops the flow after the given number of iterations.
"time_limit" stops the flow after the given wall-clock (IRL) time has elapsed.

==============================================================================

Miscellaneous:

	allow_barycenter_shift

Allows the barycenter of the overall mesh to shift, even when
constrain_barycenter is active.

	disable_near_field

Turns off near-field interactions of the energy and metric. This will not
avoid self-intersections, but also allows the energy to stay finite when
self-intersections are already present.

	method <method name>

Sets the initial method to be the given method. If not specified, the flow
will use "hs" by default. Available other names are "aqp", "bqn", "h1",
"h1-lbfgs", "h2", and "willmore". Using "willmore" will replace the
tangent-point energy with Willmore energy and use H2 flow.

	log <logfile.csv>

Logs the performance of the method, with per-iteration runtimes and energy
values dumped line-by-line to the specified CSV file. The path is also
relative to the scene file.

	autotarget_volume [number]

If a volume constraint with growth/shrinkage is being used, AND a mesh
obstacle has been registered, then this replaces the target volume of
the constraint with (number * volume(obstacle)).
 
